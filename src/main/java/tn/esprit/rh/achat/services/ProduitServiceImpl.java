package tn.esprit.rh.achat.services;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tn.esprit.rh.achat.entities.Produit;
import tn.esprit.rh.achat.entities.Stock;
import tn.esprit.rh.achat.repositories.CategorieProduitRepository;
import tn.esprit.rh.achat.repositories.ProduitRepository;
import tn.esprit.rh.achat.repositories.StockRepository;

import javax.transaction.Transactional;
import java.util.List;

@Service
@Slf4j
public class ProduitServiceImpl implements IProduitService {

    @Autowired
    ProduitRepository produitRepository;

    @Autowired
    StockRepository stockRepository;

    @Autowired
    CategorieProduitRepository categorieProduitRepository;

    @Override
    public List<Produit> retrieveAllProduits() {
        log.info("üü¶ [DEBUT] R√©cup√©ration de tous les produits");
        List<Produit> produits = (List<Produit>) produitRepository.findAll();
        for (Produit produit : produits) {
            log.info("‚û°Ô∏è Produit r√©cup√©r√© : {}", produit.getLibelleProduit());
        }
        log.info("üü© [FIN] R√©cup√©ration termin√©e : {} produits trouv√©s", produits.size());
        return produits;
    }

    @Transactional
    @Override
    public Produit addProduit(Produit p) {
        log.info("üüß [DEBUT] Ajout d‚Äôun nouveau produit : {}", p.getLibelleProduit());
        produitRepository.save(p);
        log.info("üü© [SUCC√àS] Produit ajout√© avec ID : {}", p.getIdProduit());
        return p;
    }

    @Override
    public void deleteProduit(Long produitId) {
        log.info("üü• [SUPPRESSION] Tentative de suppression du produit avec ID : {}", produitId);
        produitRepository.deleteById(produitId);
        log.info("üü© [SUCC√àS] Produit supprim√© avec ID : {}", produitId);
    }

    @Override
    public Produit updateProduit(Produit p) {
        log.info("üü® [MISE √Ä JOUR] Mise √† jour du produit ID : {}", p.getIdProduit());
        Produit updatedProduit = produitRepository.save(p);
        log.info("üü© [SUCC√àS] Produit mis √† jour : {}", updatedProduit.getLibelleProduit());
        return updatedProduit;
    }

    @Override
    public Produit retrieveProduit(Long produitId) {
        log.info("üü¶ [RECHERCHE] R√©cup√©ration du produit avec ID : {}", produitId);
        Produit produit = produitRepository.findById(produitId).orElse(null);
        if (produit != null)
            log.info("üü© [SUCC√àS] Produit trouv√© : {}", produit.getLibelleProduit());
        else
            log.warn("‚ö†Ô∏è [ERREUR] Aucun produit trouv√© pour l‚ÄôID : {}", produitId);
        return produit;
    }

    @Override
    public void assignProduitToStock(Long idProduit, Long idStock) {
        log.info("üü¶ [AFFECTATION] Produit ID {} ‚Üí Stock ID {}", idProduit, idStock);
        Produit produit = produitRepository.findById(idProduit).orElse(null);
        Stock stock = stockRepository.findById(idStock).orElse(null);

        if (produit == null || stock == null) {
            log.warn("‚ö†Ô∏è Impossible d‚Äôaffecter le produit au stock (produit ou stock introuvable)");
            return;
        }

        produit.setStock(stock);
        produitRepository.save(produit);
        log.info("üü© [SUCC√àS] Produit {} affect√© au stock {}", produit.getLibelleProduit(), stock.getLibelleStock());
    }
}
